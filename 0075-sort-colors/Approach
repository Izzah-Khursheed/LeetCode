<p>­ЪДа ­Юљђ­ЮљЕ­ЮљЕ­ЮљФ­Юље­Юљџ­Юљю­ЮљА: <br> 
--> The solution to the problem uses the "­ЮљЃ­Юљ«­ЮљГ­Юљю­ЮљА ­ЮљЇ­Юљџ­ЮљГ­Юљб­Юље­ЮљД­Юљџ­ЮљЦ ­ЮљЁ­ЮљЦ­Юљџ­Юља ­Юљџ­ЮљЦ­Юља­Юље­ЮљФ­Юљб­ЮљГ­ЮљА­Юљд", ­Юљџ ­ЮљГ­Юљ░­Юље-­ЮљЕ­Юље­Юљб­ЮљД­ЮљГ­Юљъ­ЮљФ ­ЮљГ­Юљъ­Юљю­ЮљА­ЮљД­Юљб­Юљф­Юљ«­Юљъ ­ЮљГ­ЮљА­Юљџ­ЮљГ ­Юљъ­ЮљЪ­ЮљЪ­Юљб­Юљю­Юљб­Юљъ­ЮљД­ЮљГ­ЮљЦ­Юљ▓ <br>
­Юљг­Юље­ЮљФ­ЮљГ­Юљг ­ЮљГ­ЮљА­Юљъ ­Юљџ­ЮљФ­ЮљФ­Юљџ­Юљ▓ ­Юљб­ЮљД ­Юље­ЮљД­Юљъ ­ЮљЕ­Юљџ­Юљг­Юљг.  <br>
--> The approach involves maintaining ­ЮљГ­ЮљА­ЮљФ­Юљъ­Юљъ ­ЮљЕ­Юље­Юљб­ЮљД­ЮљГ­Юљъ­ЮљФ­Юљг: '­ЮњЇ­Юњљ­Юњў', '­Юњј­Юњі­ЮњЁ', and '­ЮњЅ­Юњі­Юњѕ­ЮњЅ'. The '­ЮњЇ­Юњљ­Юњў' pointer tracks the <br>
position of the last sorted red (0), '­Юњј­Юњі­ЮњЁ' scans through each element, and '­ЮњЅ­Юњі­Юњѕ­ЮњЅ' marks the boundary for blue (2) <br>
elements.<br>
--> Starting from the beginning, '­Юњј­Юњі­ЮњЁ' iterates through the array. If '­ЮњЈ­Юњќ­Юњј­Юњћ[­Юњј­Юњі­ЮњЁ]' ­Юњі­Юњћ '0', it swaps with <br>
'­ЮњЈ­Юњќ­Юњј­Юњћ[­ЮњЇ­Юњљ­Юњў]', increments both '­ЮњЇ­Юњљ­Юњў' and '­Юњј­Юњі­ЮњЁ', positioning red elements at the start.<br>
--> If '­ЮњЈ­Юњќ­Юњј­Юњћ[­Юњј­Юњі­ЮњЁ]' ­Юњі­Юњћ '1', it simply increments '­Юњј­Юњі­ЮњЁ', as whites (1s) stay in the middle.<br>
--> If '­ЮњЈ­Юњќ­Юњј­Юњћ[­Юњј­Юњі­ЮњЁ]' ­Юњі­Юњћ '2', it swaps with '­ЮњЈ­Юњќ­Юњј­Юњћ[­ЮњЅ­Юњі­Юњѕ­ЮњЅ]' and decrements '­ЮњЅ­Юњі­Юњѕ­ЮњЅ', keeping blues (2s) at the end.<br>
--> This ­Юњі­ЮњЈ-­ЮњЉ­ЮњЇ­Юњѓ­Юњё­Юњє ­ЮњЋ­Юњє­Юњё­ЮњЅ­ЮњЈ­Юњі­Юњњ­Юњќ­Юњє achieves the desired order of colors in a single linear pass, making it both <br>
­ЮњЋ­Юњі­Юњј­Юњє-­Юњє­ЮњЄ­ЮњЄ­Юњі­Юњё­Юњі­Юњє­ЮњЈ­ЮњЋ and ­Юњј­Юњє­Юњј­Юњљ­ЮњЊ­Юњџ-­Юњє­ЮњЄ­ЮњЄ­Юњі­Юњё­Юњі­Юњє­ЮњЈ­ЮњЋ.<br>

РЈ│ ­ЮЌќ­ЮЌ╝­ЮЌ║­ЮЌй­ЮЌ╣­ЮЌ▓­ЮўЁ­ЮЌХ­ЮўЂ­Юўє ­ЮЌћ­ЮЌ╗­ЮЌ«­ЮЌ╣­Юўє­Юўђ­ЮЌХ­Юўђ:<br>
-> ­ЮЉ╗­Юњі­Юњј­Юњє ­ЮЉф­Юњљ­Юњј­ЮњЉ­ЮњЇ­Юњє­ЮњЎ­Юњі­ЮњЋ­Юњџ: O(N)<br>
-> ­ЮЉ║­ЮњЉ­Юњѓ­Юњё­Юњє ­ЮЉф­Юњљ­Юњј­ЮњЉ­ЮњЇ­Юњє­ЮњЎ­Юњі­ЮњЋ­Юњџ: O(1)<br>
</p>
